/// <reference types="node" />
import { Sourcetable } from "./sourcetable";
import events from "events";
import { Client, Server } from './connection';
import { AutoSourceEntryOptions } from './util/auto-source-entry';
export interface MountpointOptions {
    connectionTimeout?: number;
    silenceTimeout?: number;
    silenceWarningTimeout?: number;
    autoSourceEntry?: boolean;
    serverSourceEntry?: boolean;
    autoSourceEntryOptions?: AutoSourceEntryOptions;
    hidden?: boolean;
}
export declare class Mountpoint extends events.EventEmitter {
    private readonly options;
    readonly name: string;
    readonly sourceEntry: Sourcetable.SourceEntry;
    private readonly autoSourceEntry?;
    hidden: boolean;
    private _server;
    get server(): Server | null;
    private _clients;
    get clients(): ReadonlySet<Client>;
    private connectionTimeout;
    private silenceTimeout;
    private silenceWarningTimeout;
    readonly stats: {
        in: number;
        out: number;
        rate: number;
    };
    private readonly statsStream;
    private readonly statsRateCalculator;
    on(event: 'close', listener: () => void): this;
    on(event: 'client', listener: (client: Client) => void): this;
    on(event: 'server', listener: (server: Server) => void): this;
    on(event: 'timeout', listener: () => void): this;
    on(event: 'inactivity', listener: () => void): this;
    on(event: 'silence', listener: () => void): this;
    constructor(name: string, options?: MountpointOptions);
    private resetTimeouts;
    get active(): boolean;
    setServer(server: Server): void;
    clearServer(server?: Server | null): void;
    addClient(client: Client): void;
    removeClient(client: Client): void;
    close(): void;
}
