export declare class BitView {
    readonly buffer: Uint8Array;
    readonly byteLength: number;
    readonly bitLength: number;
    constructor(buffer: Uint8Array, byteOffset?: number, byteLength?: number);
    private checkBounds;
    getBit(offset: number): 1 | 0;
    getBits(offset: number, bits: number, signed: boolean): number;
    getBitArray(offset: number, bits: number): boolean[];
    setBit(offset: number, value: 1 | 0): void;
    setBits(offset: number, value: number, bits: number): void;
    setBitArray(offset: number, values: boolean[], bits?: number): void;
    getBoolean: (offset: number) => boolean;
    getInt8: (offset: number) => number;
    getUint8: (offset: number) => number;
    getInt16: (offset: number) => number;
    getUint16: (offset: number) => number;
    getInt32: (offset: number) => number;
    getUint32: (offset: number) => number;
    setBoolean: (offset: number, value: boolean) => void;
    setInt8: (offset: number, value: number) => void;
    setUint8: (offset: number, value: number) => void;
    setInt16: (offset: number, value: number) => void;
    setUint16: (offset: number, value: number) => void;
    setInt32: (offset: number, value: number) => void;
    setUint32: (offset: number, value: number) => void;
    readBuffer(offset: number, byteLength: number): Uint8Array;
    writeBuffer(offset: number, buffer: Uint8Array): number;
    readString(offset: number, byteLength: number, decoder?: TextDecoder): string;
    writeString(offset: number, string: string, byteLength?: number, encoder?: TextEncoder): number;
}
export declare class BitStream {
    readonly view: BitView;
    readonly buffer: Uint8Array;
    readonly byteLength: number;
    readonly bitLength: number;
    bitIndex: number;
    get index(): number;
    set index(val: number);
    get bitsLeft(): number;
    get byteIndex(): number;
    set byteIndex(val: number);
    constructor(source: BitView);
    constructor(source: Uint8Array, byteOffset?: number, byteLength?: number);
    readBit(): 1 | 0;
    readBits(bits: number, signed?: boolean): number;
    readBitArray(bits: number): boolean[];
    writeBit(value: 1 | 0): void;
    writeBits(value: number, bits: number): void;
    writeBitArray(values: boolean[], bits?: number): void;
    readBoolean: () => boolean;
    readInt8: () => number;
    readUint8: () => number;
    readInt16: () => number;
    readUint16: () => number;
    readInt32: () => number;
    readUint32: () => number;
    writeBoolean: (value: boolean) => void;
    writeInt8: (value: number) => void;
    writeUint8: (value: number) => void;
    writeInt16: (value: number) => void;
    writeUint16: (value: number) => void;
    writeInt32: (value: number) => void;
    writeUint32: (value: number) => void;
    readBuffer(byteLength: number): Uint8Array;
    writeBuffer(buffer: Uint8Array): number;
    readString(byteLength: number, decoder?: TextDecoder): string;
    writeString(string: string, byteLength?: number, encoder?: TextEncoder): number;
}
