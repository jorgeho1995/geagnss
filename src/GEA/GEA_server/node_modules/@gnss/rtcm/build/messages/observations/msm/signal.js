"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Msm7SignalData = exports.Msm6SignalData = exports.Msm5SignalData = exports.Msm4SignalData = exports.Msm3SignalData = exports.Msm2SignalData = exports.Msm23SignalData = exports.Msm1SignalData = exports.MsmSignalData = void 0;
const utils_1 = require("../../../utils");
const decode_encode_1 = require("../../../decode-encode");
const common_1 = require("../common");
const constants_1 = require("../../../constants");
class MsmSignalData {
    constructor(_internalGuard) { }
}
exports.MsmSignalData = MsmSignalData;
MsmSignalData.construct = utils_1.constructWithPropertiesInternalGuardPlus;
class Msm1SignalData extends MsmSignalData {
    get finePseudorangeMicroseconds() { return this.finePseudorange * 1000 / 2 ** 24; }
    set finePseudorangeMicroseconds(range) { this.finePseudorange = range * 2 ** 24 / 1000; }
    get finePseudorangeMeters() { return this.finePseudorangeMicroseconds * constants_1.SPEED_OF_LIGHT / 1000000; }
    set finePseudorangeMeters(range) { this.finePseudorangeMicroseconds = range * 1000000 / constants_1.SPEED_OF_LIGHT; }
}
__decorate([
    decode_encode_1.DF(400),
    decode_encode_1.Int(15),
    __metadata("design:type", Number)
], Msm1SignalData.prototype, "finePseudorange", void 0);
exports.Msm1SignalData = Msm1SignalData;
class Msm23SignalData extends MsmSignalData {
    get finePhaserangeMicroseconds() { return this.finePhaserange * 1000 / 2 ** 29; }
    set finePhaserangeMicroseconds(range) { this.finePhaserange = range * 2 ** 29 / 1000; }
    get finePhaserangeMeters() { return this.finePhaserangeMicroseconds * constants_1.SPEED_OF_LIGHT / 1000000; }
    set finePhaserangeMeters(range) { this.finePhaserangeMicroseconds = range * 1000000 / constants_1.SPEED_OF_LIGHT; }
    get phaserangeLockTimeMillis() { return common_1.msmLockIndicatorToTime(this.phaserangeLockTimeIndicator); }
    set phaserangeLockTimeMillis(time) { this.phaserangeLockTimeIndicator = common_1.msmLockTimeToIndicator(time); }
}
__decorate([
    decode_encode_1.DF(400),
    decode_encode_1.Int(15),
    decode_encode_1.IfInstanceOf(() => Msm3SignalData),
    __metadata("design:type", Number)
], Msm23SignalData.prototype, "finePseudorange", void 0);
__decorate([
    decode_encode_1.DF(401),
    decode_encode_1.Int(22),
    __metadata("design:type", Number)
], Msm23SignalData.prototype, "finePhaserange", void 0);
__decorate([
    decode_encode_1.DF(402),
    decode_encode_1.UInt(4),
    __metadata("design:type", Number)
], Msm23SignalData.prototype, "phaserangeLockTimeIndicator", void 0);
__decorate([
    decode_encode_1.DF(420),
    decode_encode_1.Bool,
    __metadata("design:type", Boolean)
], Msm23SignalData.prototype, "halfCycleAmbiguityIndicator", void 0);
exports.Msm23SignalData = Msm23SignalData;
class Msm2SignalData extends Msm23SignalData {
}
exports.Msm2SignalData = Msm2SignalData;
class Msm3SignalData extends Msm23SignalData {
    get finePseudorangeMicroseconds() { return this.finePseudorange * 1000 / 2 ** 24; }
    set finePseudorangeMicroseconds(range) { this.finePseudorange = range * 2 ** 24 / 1000; }
    get finePseudorangeMeters() { return this.finePseudorangeMicroseconds * constants_1.SPEED_OF_LIGHT / 1000000; }
    set finePseudorangeMeters(range) { this.finePseudorangeMicroseconds = range * 1000000 / constants_1.SPEED_OF_LIGHT; }
}
exports.Msm3SignalData = Msm3SignalData;
class Msm4SignalData extends Msm3SignalData {
}
__decorate([
    decode_encode_1.DF(403),
    decode_encode_1.UInt(6),
    __metadata("design:type", Number)
], Msm4SignalData.prototype, "cnr", void 0);
exports.Msm4SignalData = Msm4SignalData;
class Msm5SignalData extends Msm4SignalData {
    get finePhaserangeRateMetersPerSecond() { return this.finePhaserangeRate / 10000; }
    set finePhaserangeRateMetersPerSecond(rangeRate) { this.finePhaserangeRate = rangeRate * 10000; }
}
__decorate([
    decode_encode_1.DF(404),
    decode_encode_1.Int(15),
    __metadata("design:type", Number)
], Msm5SignalData.prototype, "finePhaserangeRate", void 0);
exports.Msm5SignalData = Msm5SignalData;
class Msm6SignalData extends MsmSignalData {
    get phaserangeLockTimeMillis() { return common_1.msmExtendedLockIndicatorToTime(this.phaserangeLockTimeIndicatorExtendedRangeResolution); }
    set phaserangeLockTimeMillis(time) { this.phaserangeLockTimeIndicatorExtendedRangeResolution = common_1.msmExtendedLockTimeToIndicator(time); }
    get finePseudorangeMicroseconds() { return this.finePseudorangeExtendedResolution * 1000 / 2 ** 29; }
    set finePseudorangeMicroseconds(range) { this.finePseudorangeExtendedResolution = range * 2 ** 29 / 1000; }
    get finePseudorangeMeters() { return this.finePseudorangeMicroseconds * constants_1.SPEED_OF_LIGHT / 1000000; }
    set finePseudorangeMeters(range) { this.finePseudorangeMicroseconds = range * 1000000 / constants_1.SPEED_OF_LIGHT; }
    get finePhaserangeMicroseconds() { return this.finePhaserangeExtendedResolution * 1000 / 2 ** 31; }
    set finePhaserangeMicroseconds(range) { this.finePhaserangeExtendedResolution = range * 2 ** 31 / 1000; }
    get finePhaserangeMeters() { return this.finePhaserangeMicroseconds * constants_1.SPEED_OF_LIGHT / 1000000; }
    set finePhaserangeMeters(range) { this.finePhaserangeMicroseconds = range * 1000000 / constants_1.SPEED_OF_LIGHT; }
}
__decorate([
    decode_encode_1.DF(405),
    decode_encode_1.Int(20),
    __metadata("design:type", Number)
], Msm6SignalData.prototype, "finePseudorangeExtendedResolution", void 0);
__decorate([
    decode_encode_1.DF(406),
    decode_encode_1.Int(24),
    __metadata("design:type", Number)
], Msm6SignalData.prototype, "finePhaserangeExtendedResolution", void 0);
__decorate([
    decode_encode_1.DF(407),
    decode_encode_1.UInt(10),
    __metadata("design:type", Number)
], Msm6SignalData.prototype, "phaserangeLockTimeIndicatorExtendedRangeResolution", void 0);
__decorate([
    decode_encode_1.DF(420),
    decode_encode_1.Bool,
    __metadata("design:type", Boolean)
], Msm6SignalData.prototype, "halfCycleAmbiguityIndicator", void 0);
__decorate([
    decode_encode_1.DF(408),
    decode_encode_1.UInt(10),
    __metadata("design:type", Number)
], Msm6SignalData.prototype, "cnrExtendedResolution", void 0);
exports.Msm6SignalData = Msm6SignalData;
class Msm7SignalData extends Msm6SignalData {
    get finePhaserangeRateMetersPerSecond() { return this.finePhaserangeRate / 10000; }
    set finePhaserangeRateMetersPerSecond(rangeRate) { this.finePhaserangeRate = rangeRate * 10000; }
}
__decorate([
    decode_encode_1.DF(404),
    decode_encode_1.Int(15),
    __metadata("design:type", Number)
], Msm7SignalData.prototype, "finePhaserangeRate", void 0);
exports.Msm7SignalData = Msm7SignalData;
