"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.msmExtendedLossOfContinuity = exports.msmExtendedLockTimeToIndicator = exports.msmExtendedLockIndicatorToTime = exports.msmLockLossOfContinuity = exports.msmLockTimeToIndicator = exports.msmLockIndicatorToTime = exports.legacyLockTimeToIndicator = exports.legacyLockIndicatorToTime = void 0;
function legacyLockIndicatorToTime(indicator) {
    if (indicator < 24)
        return indicator;
    if (indicator < 48)
        return 2 * indicator - 24;
    if (indicator < 72)
        return 4 * indicator - 120;
    if (indicator < 96)
        return 8 * indicator - 408;
    if (indicator < 120)
        return 16 * indicator - 1176;
    if (indicator < 127)
        return 32 * indicator - 3096;
    return 937;
}
exports.legacyLockIndicatorToTime = legacyLockIndicatorToTime;
function legacyLockTimeToIndicator(time) {
    if (time < 24)
        return Math.floor(time);
    if (time < 72)
        return Math.floor((time + 24) / 2);
    if (time < 168)
        return Math.floor((time + 120) / 4);
    if (time < 360)
        return Math.floor((time + 408) / 8);
    if (time < 744)
        return Math.floor((time + 1176) / 16);
    if (time < 937)
        return Math.floor((time + 3096) / 32);
    return 127;
}
exports.legacyLockTimeToIndicator = legacyLockTimeToIndicator;
function msmLockIndicatorToTime(indicator) {
    return indicator === 0 ? 0 : 32 * (2 ** (indicator - 1));
}
exports.msmLockIndicatorToTime = msmLockIndicatorToTime;
function msmLockTimeToIndicator(time) {
    return time < 32 ? 0 : Math.floor(Math.log2(time / 32)) + 1;
}
exports.msmLockTimeToIndicator = msmLockTimeToIndicator;
function msmLockLossOfContinuity(previousTime, currentTime, timeInterval) {
    if (previousTime > currentTime)
        return true;
    if (previousTime === currentTime)
        return timeInterval >= previousTime;
    if (timeInterval >= (2 * currentTime - previousTime))
        return true;
    return currentTime < timeInterval;
}
exports.msmLockLossOfContinuity = msmLockLossOfContinuity;
function msmExtendedLockIndicatorToTime(indicator) {
    for (let i = 0; i <= 20; i++) {
        if (indicator < 64 + i * 32)
            return (2 ** i) * (indicator - (i * 32));
    }
    return 67108864;
}
exports.msmExtendedLockIndicatorToTime = msmExtendedLockIndicatorToTime;
function msmExtendedLockTimeToIndicator(time) {
    for (let i = 0; i <= 20; i++) {
        if (time < 64 * (2 ** i))
            return Math.floor(i * 32 + time / (2 ** i));
    }
    return 704;
}
exports.msmExtendedLockTimeToIndicator = msmExtendedLockTimeToIndicator;
function msmExtendedLossOfContinuity(previousTime, currentTime, timeInterval) {
    const previousSupplementaryCoefficient = 2 ** Math.floor(Math.log2(previousTime));
    const currentSupplementaryCoefficient = 2 ** Math.floor(Math.log2(currentTime));
    if (previousTime > currentTime)
        return true;
    if (previousTime === currentTime)
        return timeInterval >= previousSupplementaryCoefficient;
    if (currentSupplementaryCoefficient > previousTime && timeInterval > (currentTime + currentSupplementaryCoefficient + previousTime))
        return true;
    return currentTime < timeInterval;
}
exports.msmExtendedLossOfContinuity = msmExtendedLossOfContinuity;
