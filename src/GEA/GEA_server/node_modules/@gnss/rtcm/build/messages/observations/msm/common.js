"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RtcmMessageMsm7 = exports.RtcmMessageMsm6 = exports.RtcmMessageMsm5 = exports.RtcmMessageMsm4 = exports.RtcmMessageMsm3 = exports.RtcmMessageMsm2 = exports.RtcmMessageMsm1 = exports.RtcmMessageMsm = exports.MsmHeaderInfo = void 0;
const decode_encode_1 = require("../../../decode-encode");
const rtcm_1 = require("../../../rtcm");
const bit_buffer_ts_1 = require("bit-buffer-ts");
const satellite_1 = require("./satellite");
const signal_1 = require("./signal");
const utils_1 = require("../../../utils");
class MsmHeaderInfo {
    constructor() {
        this.satelliteIds = [];
        this.signalIds = [];
    }
    get cellCount() { return this.satelliteIds.length * this.signalIds.length; }
}
exports.MsmHeaderInfo = MsmHeaderInfo;
class RtcmMessageMsm extends rtcm_1.RtcmMessage {
    constructor(internalGuard, satelliteConstructor, signalConstructor) {
        super(internalGuard);
        this.satelliteConstructor = satelliteConstructor;
        this.signalConstructor = signalConstructor;
        this._info = new MsmHeaderInfo();
    }
    decodeBody(s) {
        const satelliteDecoder = decode_encode_1.getDecoderEncoder(this.satelliteConstructor).decoder;
        const signalDecoder = decode_encode_1.getDecoderEncoder(this.signalConstructor).decoder;
        this._satellites = [];
        this._info.satelliteMask = [s.readUint32(), s.readUint32()];
        this._info.signalMask = s.readUint32();
        for (let m = 0; m < 1; m++) {
            for (let i = 1; i <= 32; i++) {
                const id = (m << 5) + i;
                if ((this._info.satelliteMask[m] >> (32 - i)) & 0b1) {
                    const satellite = new this.satelliteConstructor(undefined);
                    satellite.id = id;
                    this._satellites.push(satellite);
                    this._info.satelliteIds.push(id);
                }
            }
        }
        for (let i = 1; i <= 32; i++)
            if ((this._info.signalMask >> (32 - i)) & 0b1)
                this._info.signalIds.push(i);
        this._info.cellMask = [];
        for (let i = 0; i < this._info.satelliteIds.length; i++)
            this._info.cellMask[i] = s.readBits(this._info.signalIds.length);
        for (const satellite of this._satellites)
            satelliteDecoder.run(satellite, s);
        for (let i = 0; i < this._info.satelliteIds.length; i++) {
            const signals = [];
            for (let j = 0; j < this._info.signalIds.length; j++) {
                if ((this._info.cellMask[i] >> (this._info.signalIds.length - j - 1)) & 0b1) {
                    const signal = new this.signalConstructor(undefined);
                    signal.id = this._info.signalIds[j];
                    signalDecoder.run(signal, s);
                    signals.push(signal);
                }
            }
            this.satellites[i].signals = signals;
        }
    }
    encodeBody(s) {
        const satelliteEncoder = decode_encode_1.getDecoderEncoder(this.satelliteConstructor).encoder;
        const signalEncoder = decode_encode_1.getDecoderEncoder(this.signalConstructor).encoder;
        s.writeUint32(this._info.satelliteMask[0]);
        s.writeUint32(this._info.satelliteMask[1]);
        s.writeUint32(this._info.signalMask);
        for (const cellMask of this._info.cellMask)
            s.writeBits(cellMask, this._info.signalIds.length);
        for (const satellite of this._satellites) {
            satelliteEncoder.run(satellite, s);
        }
        for (const satellite of this._satellites) {
            for (const signal of satellite.signals) {
                signalEncoder.run(signal, s);
            }
        }
    }
    get info() { return this._info; }
    get satellites() { return this._satellites; }
    set satellites(satellites) {
        this._satellites = Array.from(satellites)
            .sort((a, b) => a.id - b.id);
        const satelliteSignalsMap = satellites.map(satellite => satellite.signals.reduce((mask, signal) => mask | (0b1 << (32 - signal.id)), 0) >>> 0);
        this._info.satelliteMask = [0, 0];
        this._info.satelliteMask[0] = satellites.filter(satellite => satellite.id <= 32)
            .reduce((mask, satellite) => mask | (0b1 << (32 - satellite.id)), 0) >>> 0;
        this._info.satelliteMask[1] = satellites.filter(satellite => satellite.id > 32)
            .reduce((mask, satellite) => mask | (0b1 << (64 - satellite.id)), 0) >>> 0;
        this._info.satelliteIds = this.satellites.map(satellite => satellite.id);
        this._info.signalMask = satelliteSignalsMap.reduce((mask, satelliteMask) => mask | satelliteMask) >>> 0;
        this._info.signalIds = [];
        for (let i = 1; i <= 32; i++)
            if (((this._info.signalMask >> (32 - i)) & 0b1) === 1)
                this._info.signalIds.push(i);
        this._info.cellMask = new Array(satellites.length).fill(0);
        for (let i = 0; i < satellites.length; i++) {
            for (let j = 0; j < this._info.signalIds.length; j++) {
                if (((satelliteSignalsMap[i] >> (32 - this._info.signalIds[j])) & 0b1) === 1)
                    this.info.cellMask[i] |= 0b1 << (this._info.signalIds.length - j - 1);
            }
        }
    }
}
__decorate([
    decode_encode_1.DF(3),
    decode_encode_1.UInt(12),
    __metadata("design:type", Number)
], RtcmMessageMsm.prototype, "referenceStationId", void 0);
__decorate([
    decode_encode_1.UInt(30),
    __metadata("design:type", Number)
], RtcmMessageMsm.prototype, "gnssEpochTime", void 0);
__decorate([
    decode_encode_1.DF(393),
    decode_encode_1.Bool,
    __metadata("design:type", Boolean)
], RtcmMessageMsm.prototype, "multipleMessage", void 0);
__decorate([
    decode_encode_1.DF(409),
    decode_encode_1.UInt(3),
    __metadata("design:type", Number)
], RtcmMessageMsm.prototype, "issueOfDataStation", void 0);
__decorate([
    decode_encode_1.DF(1),
    decode_encode_1.Skip(7),
    __metadata("design:type", void 0)
], RtcmMessageMsm.prototype, "skip2", void 0);
__decorate([
    decode_encode_1.DF(411),
    decode_encode_1.UInt(2),
    __metadata("design:type", Number)
], RtcmMessageMsm.prototype, "clockSteeringIndicator", void 0);
__decorate([
    decode_encode_1.DF(412),
    decode_encode_1.UInt(2),
    __metadata("design:type", Number)
], RtcmMessageMsm.prototype, "externalClockIndicator", void 0);
__decorate([
    decode_encode_1.DF(417),
    decode_encode_1.Bool,
    __metadata("design:type", Boolean)
], RtcmMessageMsm.prototype, "divergenceFreeSmoothingIndicator", void 0);
__decorate([
    decode_encode_1.DF(418),
    decode_encode_1.UInt(3),
    __metadata("design:type", Number)
], RtcmMessageMsm.prototype, "smoothingInterval", void 0);
__decorate([
    decode_encode_1.CustomDecoder,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [bit_buffer_ts_1.BitStream]),
    __metadata("design:returntype", void 0)
], RtcmMessageMsm.prototype, "decodeBody", null);
__decorate([
    decode_encode_1.CustomEncoder,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [bit_buffer_ts_1.BitStream]),
    __metadata("design:returntype", void 0)
], RtcmMessageMsm.prototype, "encodeBody", null);
exports.RtcmMessageMsm = RtcmMessageMsm;
class RtcmMessageMsm1 extends RtcmMessageMsm {
    constructor(internalGuard) { super(internalGuard, satellite_1.Msm1SatelliteData, signal_1.Msm1SignalData); }
}
exports.RtcmMessageMsm1 = RtcmMessageMsm1;
class RtcmMessageMsm2 extends RtcmMessageMsm {
    constructor(internalGuard) { super(internalGuard, satellite_1.Msm2SatelliteData, signal_1.Msm2SignalData); }
}
exports.RtcmMessageMsm2 = RtcmMessageMsm2;
class RtcmMessageMsm3 extends RtcmMessageMsm {
    constructor(internalGuard) { super(internalGuard, satellite_1.Msm3SatelliteData, signal_1.Msm3SignalData); }
}
exports.RtcmMessageMsm3 = RtcmMessageMsm3;
class RtcmMessageMsm4 extends RtcmMessageMsm {
    constructor(internalGuard) { super(internalGuard, satellite_1.Msm4SatelliteData, signal_1.Msm4SignalData); }
}
exports.RtcmMessageMsm4 = RtcmMessageMsm4;
class RtcmMessageMsm5 extends RtcmMessageMsm {
    constructor(internalGuard) { super(internalGuard, satellite_1.Msm5SatelliteData, signal_1.Msm5SignalData); }
}
exports.RtcmMessageMsm5 = RtcmMessageMsm5;
class RtcmMessageMsm6 extends RtcmMessageMsm {
    constructor(internalGuard) { super(internalGuard, satellite_1.Msm6SatelliteData, signal_1.Msm6SignalData); }
}
exports.RtcmMessageMsm6 = RtcmMessageMsm6;
class RtcmMessageMsm7 extends RtcmMessageMsm {
    constructor(internalGuard) { super(internalGuard, satellite_1.Msm7SatelliteData, signal_1.Msm7SignalData); }
}
exports.RtcmMessageMsm7 = RtcmMessageMsm7;
