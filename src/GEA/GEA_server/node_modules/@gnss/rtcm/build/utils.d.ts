export declare type TypeKeys<T, U> = {
    [P in keyof T]: U extends T[P] ? P : never;
}[keyof T];
export declare type FunctionKeys<T> = TypeKeys<T, (...args: any[]) => any>;
export declare const constructPropertiesKey: unique symbol;
export declare function constructWithProperties<T>(this: new () => T, properties: Omit<T, FunctionKeys<T>>): T;
export declare function constructWithPropertiesPlus<T, E extends keyof T = never, I = any>(this: (new () => T) & {
    [constructPropertiesKey]?: (exclude: E) => I;
}, properties: Omit<T, FunctionKeys<T> | E> & I): T;
export declare function constructWithPropertiesInternalGuard<T>(this: new (internalGuard: never) => T, properties: Omit<T, FunctionKeys<T>>): T;
export declare function constructWithPropertiesInternalGuardPlus<T, E extends keyof T = never, I = {}>(this: (new (internalGuard: never) => T) & {
    [constructPropertiesKey]?: (exclude: E) => I;
}, properties: Omit<T, FunctionKeys<T> | E> & I): T;
export declare function constructWithPropertiesAndParameters<T, U extends any[]>(this: new (...params: U) => T, properties: Omit<T, FunctionKeys<T>>, ...parameters: U): T;
export declare function constructWithPropertiesAndParametersPlus<T, U extends any[], E extends keyof T = never, I = {}>(this: (new (...params: U) => T) & {
    [constructPropertiesKey]?: (exclude: E) => I;
}, properties: Omit<T, FunctionKeys<T> | E> & I, ...parameters: U): T;
